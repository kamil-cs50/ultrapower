{"mappings":"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","sources":["<anon>","assets/js/product.js"],"sourcesContent":["var $356a6f13b8c35739$exports = {};\n/**\n * Funkcjonalność galerii produktów\n */ class $356a6f13b8c35739$var$ProductGallery {\n    constructor(){\n        // Główny obraz produktu\n        this.mainImage = document.querySelector('.main-image img');\n        // Miniatury obrazów produktu\n        this.thumbnails = document.querySelectorAll('.thumbnail');\n        // Aktualny indeks wyświetlanego obrazu\n        this.currentIndex = 0;\n        // Flaga informująca, czy trwa przejście między obrazami\n        this.isTransitioning = false;\n        // Inicjalizacja galerii, jeśli istnieją elementy obrazu głównego i miniatur\n        if (this.mainImage && this.thumbnails.length > 0) this.initGallery();\n    }\n    initGallery() {\n        // Dodanie przejść CSS do głównego obrazu\n        if (this.mainImage) {\n            this.mainImage.style.opacity = '1'; // Ustawienie początkowej opopacity na 1\n            this.mainImage.style.transition = 'opacity 0.3s ease-in-out'; // Dodanie przejścia opacity\n        }\n        // Obsługa kliknięć miniatur\n        this.thumbnails.forEach((thumbnail, index)=>{\n            thumbnail.addEventListener('click', (e)=>{\n                e.preventDefault(); // Zapobieganie domyślnej akcji linku\n                if (this.isTransitioning) return; // Przerwanie, jeśli trwa już przejście\n                const newImage = thumbnail.querySelector('img'); // Pobranie elementu img z miniatury\n                // Sprawdzenie, czy nowy obraz istnieje i czy jego źródło jest różne od aktualnego obrazu głównego\n                if (newImage && newImage.src !== this.mainImage.src) this.switchImage(newImage.src, index); // Przełączenie obrazu\n            });\n        });\n        // Ustawienie początkowego aktywnego stanu dla pierwszej miniatury\n        if (this.thumbnails[0]) this.thumbnails[0].classList.add('active'); // Dodanie klasy 'active' do pierwszej miniatury\n        // Dodanie nawigacji klawiaturą\n        document.addEventListener('keydown', (e)=>{\n            if (e.key === 'ArrowLeft') this.previousImage(); // Przejście do poprzedniego obrazu\n            else if (e.key === 'ArrowRight') this.nextImage(); // Przejście do następnego obrazu\n        });\n        // Dodanie obsługi dotyku\n        this.setupTouchEvents();\n    }\n    // Funkcja do przełączania obrazu\n    switchImage(newSrc, newIndex) {\n        if (this.isTransitioning || newIndex === this.currentIndex) return; // Przerwanie, jeśli trwa przejście lub indeks jest taki sam\n        this.isTransitioning = true; // Ustawienie flagi przejścia na true\n        // Wyciszenie aktualnego obrazu\n        this.mainImage.style.opacity = '0'; // Ustawienie opacity na 0\n        // Aktualizacja obrazu po wyciszeniu\n        setTimeout(()=>{\n            this.mainImage.src = newSrc; // Zmiana źródła obrazu głównego\n            this.mainImage.classList.add('fade-in'); // Dodanie klasy 'fade-in' dla efektu pojawiania się\n            this.mainImage.style.opacity = '1'; // Ustawienie opacity na 1, aby obraz był widoczny\n            // Aktualizacja aktywnej miniatury\n            this.thumbnails[this.currentIndex].classList.remove('active'); // Usunięcie klasy 'active' z poprzedniej miniatury\n            this.thumbnails[newIndex].classList.add('active'); // Dodanie klasy 'active' do nowej miniatury\n            this.currentIndex = newIndex; // Aktualizacja aktualnego indeksu\n            // Usunięcie klasy fade-in i reset blokady przejścia po pojawieniu się obrazu\n            setTimeout(()=>{\n                this.mainImage.classList.remove('fade-in'); // Usunięcie klasy 'fade-in'\n                this.isTransitioning = false; // Reset flagi przejścia\n            }, 300); // Czas trwania animacji przejścia\n        }, 300); // Opóźnienie przed zmianą źródła obrazu, odpowiadające czasowi wyciszania\n    }\n    // Funkcja do przełączania na poprzedni obraz\n    previousImage() {\n        if (this.isTransitioning) return; // Przerwanie, jeśli trwa przejście\n        // Obliczenie indeksu poprzedniego obrazu\n        const newIndex = (this.currentIndex - 1 + this.thumbnails.length) % this.thumbnails.length;\n        const newImage = this.thumbnails[newIndex].querySelector('img'); // Pobranie elementu img poprzedniej miniatury\n        if (newImage) this.switchImage(newImage.src, newIndex); // Przełączenie obrazu na poprzedni\n    }\n    // Funkcja do przełączania na następny obraz\n    nextImage() {\n        if (this.isTransitioning) return; // Przerwanie, jeśli trwa przejście\n        // Obliczenie indeksu następnego obrazu\n        const newIndex = (this.currentIndex + 1) % this.thumbnails.length;\n        const newImage = this.thumbnails[newIndex].querySelector('img'); // Pobranie elementu img następnej miniatury\n        if (newImage) this.switchImage(newImage.src, newIndex); // Przełączenie obrazu na następny\n    }\n    // Konfiguracja obsługi zdarzeń dotykowych\n    setupTouchEvents() {\n        let touchStartX = 0; // Początkowa pozycja X dotyku\n        let touchEndX = 0; // Końcowa pozycja X dotyku\n        // Detektor zdarzenia rozpoczęcia dotyku na głównym obrazie\n        this.mainImage.addEventListener('touchstart', (e)=>{\n            touchStartX = e.touches[0].clientX; // Zapisanie pozycji X dotknięcia\n        }, {\n            passive: true\n        }); // Opcja passive: true dla lepszej responsywności przewijania\n        // Detektor zdarzenia zakończenia dotyku na głównym obrazie\n        this.mainImage.addEventListener('touchend', (e)=>{\n            touchEndX = e.changedTouches[0].clientX; // Zapisanie pozycji X po zakończeniu dotyku\n            const difference = touchStartX - touchEndX; // Obliczenie różnicy między początkową a końcową pozycją\n            if (Math.abs(difference) > 50) {\n                if (difference > 0) this.nextImage(); // Przejście do następnego obrazu (swipe w lewo)\n                else this.previousImage(); // Przejście do poprzedniego obrazu (swipe w prawo)\n            }\n        }, {\n            passive: true\n        }); // Opcja passive: true dla lepszej responsywności przewijania\n    }\n}\n/**\n * Funkcjonalność strony produktu\n */ class $356a6f13b8c35739$var$ProductPage {\n    constructor(){\n        // Galeria produktu\n        this.gallery = null;\n        this.initialize(); // Inicjalizacja strony produktu\n    }\n    initialize() {\n        // Inicjalizacja galerii\n        this.gallery = new $356a6f13b8c35739$var$ProductGallery();\n        // Inicjalizacja kontrolek ilości\n        this.setupQuantityControls();\n        // Inicjalizacja dodawania do koszyka\n        this.setupAddToCart();\n    }\n    // Konfiguracja kontrolek ilości produktu\n    setupQuantityControls() {\n        const controls = document.querySelector('.quantity-controls'); // Znalezienie kontrolek ilości\n        if (!controls) return; // Przerwanie, jeśli kontrolki nie istnieją\n        const input = controls.querySelector('input'); // Znalezienie inputa ilości\n        const minus = controls.querySelector('.minus'); // Znalezienie przycisku minus\n        const plus = controls.querySelector('.plus'); // Znalezienie przycisku plus\n        // Obsługa kliknięcia przycisku minus\n        if (minus && input) minus.addEventListener('click', ()=>{\n            const currentValue = parseInt(input.value); // Pobranie aktualnej wartości z inputa\n            if (currentValue > 1) input.value = currentValue - 1; // Zmniejszenie wartości o 1, jeśli jest większa niż 1\n        });\n        // Obsługa kliknięcia przycisku plus\n        if (plus && input) plus.addEventListener('click', ()=>{\n            const currentValue = parseInt(input.value); // Pobranie aktualnej wartości z inputa\n            if (currentValue < 99) input.value = currentValue + 1; // Zwiększenie wartości o 1, jeśli jest mniejsza niż 99\n        });\n        // Obsługa zmiany wartości w inpucie ilości\n        if (input) input.addEventListener('change', ()=>{\n            let value = parseInt(input.value); // Parsowanie wartości z inputa\n            if (isNaN(value) || value < 1) value = 1; // Ustawienie wartości na 1, jeśli jest NaN lub mniejsza niż 1\n            if (value > 99) value = 99; // Ustawienie wartości na 99, jeśli jest większa niż 99\n            input.value = value; // Aktualizacja wartości inputa\n        });\n    }\n    // Konfiguracja dodawania produktu do koszyka\n    setupAddToCart() {\n        const addToCartBtn = document.querySelector('.add-to-cart'); // Znalezienie przycisku \"Dodaj do koszyka\"\n        if (!addToCartBtn) return; // Przerwanie, jeśli przycisk nie istnieje\n        // Obsługa kliknięcia przycisku \"Dodaj do koszyka\"\n        addToCartBtn.addEventListener('click', ()=>{\n            const productElement = document.querySelector('[data-product-id]'); // Znalezienie elementu produktu po data-product-id\n            if (!productElement) return; // Przerwanie, jeśli element produktu nie istnieje\n            // Pobranie danych produktu\n            const quantity = parseInt(document.querySelector('.quantity-controls input')?.value || 1); // Pobranie ilości z inputa lub domyślnie 1\n            const productData = {\n                id: productElement.dataset.productId,\n                name: document.querySelector('.product-header h1')?.textContent,\n                price: document.querySelector('.price')?.textContent,\n                image: document.querySelector('.main-image img')?.src,\n                quantity: quantity // Ilość produktu\n            };\n            this.addToCart(productData); // Dodanie produktu do koszyka\n        });\n    }\n    // Funkcja dodająca produkt do koszyka\n    addToCart(productData) {\n        // Sprawdzenie, czy obiekt aplikacji i CartManager istnieją\n        if (window.app && window.app.cartManager) {\n            if (window.app.cartManager.addToCart(productData)) this.showNotification(); // Wyświetlenie powiadomienia o dodaniu do koszyka\n        } else console.error(\"CartManager not available\"); // Wyświetlenie błędu, jeśli CartManager nie jest dostępny\n    }\n    // Wyświetlenie powiadomienia o dodaniu do koszyka\n    showNotification() {\n        const notification = document.createElement('div'); // Utworzenie elementu div dla powiadomienia\n        notification.className = 'added-to-cart-notification glass'; // Dodanie klas CSS\n        notification.textContent = 'Dodano do koszyka'; // Ustawienie tekstu powiadomienia\n        document.body.appendChild(notification); // Dodanie powiadomienia do body\n        // Animacja pojawiania się powiadomienia\n        requestAnimationFrame(()=>{\n            notification.classList.add('show'); // Dodanie klasy 'show', aby rozpocząć animację\n        });\n        // Ukrycie i usunięcie powiadomienia po 2 sekundach\n        setTimeout(()=>{\n            notification.classList.remove('show'); // Usunięcie klasy 'show', aby rozpocząć animację znikania\n            setTimeout(()=>notification.remove(), 300); // Usunięcie elementu powiadomienia z DOM po zakończeniu animacji znikania\n        }, 2000); // Czas wyświetlania powiadomienia (2 sekundy)\n    }\n}\n// Inicjalizacja strony produktu po załadowaniu DOM\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    // Sprawdzenie, czy na stronie znajduje się element .product-details (co sugeruje stronę produktu)\n    if (document.querySelector('.product-details')) new $356a6f13b8c35739$var$ProductPage(); // Utworzenie nowej instancji ProductPage, inicjalizując funkcjonalność strony produktu\n});\n\n\n//# sourceMappingURL=bio-regeneration.e6227cdf.js.map\n","/**\n * Funkcjonalność galerii produktów\n */\nclass ProductGallery {\n    constructor() {\n        // Główny obraz produktu\n        this.mainImage = document.querySelector('.main-image img');\n        // Miniatury obrazów produktu\n        this.thumbnails = document.querySelectorAll('.thumbnail');\n        // Aktualny indeks wyświetlanego obrazu\n        this.currentIndex = 0;\n        // Flaga informująca, czy trwa przejście między obrazami\n        this.isTransitioning = false;\n\n        // Inicjalizacja galerii, jeśli istnieją elementy obrazu głównego i miniatur\n        if (this.mainImage && this.thumbnails.length > 0) {\n            this.initGallery();\n        }\n    }\n\n    initGallery() {\n        // Dodanie przejść CSS do głównego obrazu\n        if (this.mainImage) {\n            this.mainImage.style.opacity = '1'; // Ustawienie początkowej opopacity na 1\n            this.mainImage.style.transition = 'opacity 0.3s ease-in-out'; // Dodanie przejścia opacity\n        }\n\n        // Obsługa kliknięć miniatur\n        this.thumbnails.forEach((thumbnail, index) => {\n            thumbnail.addEventListener('click', (e) => {\n                e.preventDefault(); // Zapobieganie domyślnej akcji linku\n                if (this.isTransitioning) return; // Przerwanie, jeśli trwa już przejście\n\n                const newImage = thumbnail.querySelector('img'); // Pobranie elementu img z miniatury\n                // Sprawdzenie, czy nowy obraz istnieje i czy jego źródło jest różne od aktualnego obrazu głównego\n                if (newImage && newImage.src !== this.mainImage.src) {\n                    this.switchImage(newImage.src, index); // Przełączenie obrazu\n                }\n            });\n        });\n\n        // Ustawienie początkowego aktywnego stanu dla pierwszej miniatury\n        if (this.thumbnails[0]) {\n            this.thumbnails[0].classList.add('active'); // Dodanie klasy 'active' do pierwszej miniatury\n        }\n\n        // Dodanie nawigacji klawiaturą\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowLeft') {\n                this.previousImage(); // Przejście do poprzedniego obrazu\n            } else if (e.key === 'ArrowRight') {\n                this.nextImage(); // Przejście do następnego obrazu\n            }\n        });\n\n        // Dodanie obsługi dotyku\n        this.setupTouchEvents();\n    }\n\n    // Funkcja do przełączania obrazu\n    switchImage(newSrc, newIndex) {\n        if (this.isTransitioning || newIndex === this.currentIndex) return; // Przerwanie, jeśli trwa przejście lub indeks jest taki sam\n\n        this.isTransitioning = true; // Ustawienie flagi przejścia na true\n\n        // Wyciszenie aktualnego obrazu\n        this.mainImage.style.opacity = '0'; // Ustawienie opacity na 0\n\n        // Aktualizacja obrazu po wyciszeniu\n        setTimeout(() => {\n            this.mainImage.src = newSrc; // Zmiana źródła obrazu głównego\n            this.mainImage.classList.add('fade-in'); // Dodanie klasy 'fade-in' dla efektu pojawiania się\n            this.mainImage.style.opacity = '1'; // Ustawienie opacity na 1, aby obraz był widoczny\n\n            // Aktualizacja aktywnej miniatury\n            this.thumbnails[this.currentIndex].classList.remove('active'); // Usunięcie klasy 'active' z poprzedniej miniatury\n            this.thumbnails[newIndex].classList.add('active'); // Dodanie klasy 'active' do nowej miniatury\n\n            this.currentIndex = newIndex; // Aktualizacja aktualnego indeksu\n\n            // Usunięcie klasy fade-in i reset blokady przejścia po pojawieniu się obrazu\n            setTimeout(() => {\n                this.mainImage.classList.remove('fade-in'); // Usunięcie klasy 'fade-in'\n                this.isTransitioning = false; // Reset flagi przejścia\n            }, 300); // Czas trwania animacji przejścia\n        }, 300); // Opóźnienie przed zmianą źródła obrazu, odpowiadające czasowi wyciszania\n    }\n\n    // Funkcja do przełączania na poprzedni obraz\n    previousImage() {\n        if (this.isTransitioning) return; // Przerwanie, jeśli trwa przejście\n\n        // Obliczenie indeksu poprzedniego obrazu\n        const newIndex = (this.currentIndex - 1 + this.thumbnails.length) % this.thumbnails.length;\n        const newImage = this.thumbnails[newIndex].querySelector('img'); // Pobranie elementu img poprzedniej miniatury\n\n        if (newImage) {\n            this.switchImage(newImage.src, newIndex); // Przełączenie obrazu na poprzedni\n        }\n    }\n\n    // Funkcja do przełączania na następny obraz\n    nextImage() {\n        if (this.isTransitioning) return; // Przerwanie, jeśli trwa przejście\n\n        // Obliczenie indeksu następnego obrazu\n        const newIndex = (this.currentIndex + 1) % this.thumbnails.length;\n        const newImage = this.thumbnails[newIndex].querySelector('img'); // Pobranie elementu img następnej miniatury\n\n        if (newImage) {\n            this.switchImage(newImage.src, newIndex); // Przełączenie obrazu na następny\n        }\n    }\n\n    // Konfiguracja obsługi zdarzeń dotykowych\n    setupTouchEvents() {\n        let touchStartX = 0; // Początkowa pozycja X dotyku\n        let touchEndX = 0; // Końcowa pozycja X dotyku\n\n        // Detektor zdarzenia rozpoczęcia dotyku na głównym obrazie\n        this.mainImage.addEventListener('touchstart', (e) => {\n            touchStartX = e.touches[0].clientX; // Zapisanie pozycji X dotknięcia\n        }, { passive: true }); // Opcja passive: true dla lepszej responsywności przewijania\n\n        // Detektor zdarzenia zakończenia dotyku na głównym obrazie\n        this.mainImage.addEventListener('touchend', (e) => {\n            touchEndX = e.changedTouches[0].clientX; // Zapisanie pozycji X po zakończeniu dotyku\n            const difference = touchStartX - touchEndX; // Obliczenie różnicy między początkową a końcową pozycją\n\n            if (Math.abs(difference) > 50) { // Sprawdzenie, czy przesunięcie jest większe niż 50px (minimalna odległość swipe)\n                if (difference > 0) {\n                    this.nextImage(); // Przejście do następnego obrazu (swipe w lewo)\n                } else {\n                    this.previousImage(); // Przejście do poprzedniego obrazu (swipe w prawo)\n                }\n            }\n        }, { passive: true }); // Opcja passive: true dla lepszej responsywności przewijania\n    }\n}\n\n/**\n * Funkcjonalność strony produktu\n */\nclass ProductPage {\n    constructor() {\n        // Galeria produktu\n        this.gallery = null;\n        this.initialize(); // Inicjalizacja strony produktu\n    }\n\n    initialize() {\n        // Inicjalizacja galerii\n        this.gallery = new ProductGallery();\n\n        // Inicjalizacja kontrolek ilości\n        this.setupQuantityControls();\n\n        // Inicjalizacja dodawania do koszyka\n        this.setupAddToCart();\n    }\n\n    // Konfiguracja kontrolek ilości produktu\n    setupQuantityControls() {\n        const controls = document.querySelector('.quantity-controls'); // Znalezienie kontrolek ilości\n        if (!controls) return; // Przerwanie, jeśli kontrolki nie istnieją\n\n        const input = controls.querySelector('input'); // Znalezienie inputa ilości\n        const minus = controls.querySelector('.minus'); // Znalezienie przycisku minus\n        const plus = controls.querySelector('.plus'); // Znalezienie przycisku plus\n\n        // Obsługa kliknięcia przycisku minus\n        if (minus && input) {\n            minus.addEventListener('click', () => {\n                const currentValue = parseInt(input.value); // Pobranie aktualnej wartości z inputa\n                if (currentValue > 1) {\n                    input.value = currentValue - 1; // Zmniejszenie wartości o 1, jeśli jest większa niż 1\n                }\n            });\n        }\n\n        // Obsługa kliknięcia przycisku plus\n        if (plus && input) {\n            plus.addEventListener('click', () => {\n                const currentValue = parseInt(input.value); // Pobranie aktualnej wartości z inputa\n                if (currentValue < 99) {\n                    input.value = currentValue + 1; // Zwiększenie wartości o 1, jeśli jest mniejsza niż 99\n                }\n            });\n        }\n\n        // Obsługa zmiany wartości w inpucie ilości\n        if (input) {\n            input.addEventListener('change', () => {\n                let value = parseInt(input.value); // Parsowanie wartości z inputa\n                if (isNaN(value) || value < 1) value = 1; // Ustawienie wartości na 1, jeśli jest NaN lub mniejsza niż 1\n                if (value > 99) value = 99; // Ustawienie wartości na 99, jeśli jest większa niż 99\n                input.value = value; // Aktualizacja wartości inputa\n            });\n        }\n    }\n\n    // Konfiguracja dodawania produktu do koszyka\n    setupAddToCart() {\n        const addToCartBtn = document.querySelector('.add-to-cart'); // Znalezienie przycisku \"Dodaj do koszyka\"\n        if (!addToCartBtn) return; // Przerwanie, jeśli przycisk nie istnieje\n\n        // Obsługa kliknięcia przycisku \"Dodaj do koszyka\"\n        addToCartBtn.addEventListener('click', () => {\n            const productElement = document.querySelector('[data-product-id]'); // Znalezienie elementu produktu po data-product-id\n            if (!productElement) return; // Przerwanie, jeśli element produktu nie istnieje\n\n            // Pobranie danych produktu\n            const quantity = parseInt(document.querySelector('.quantity-controls input')?.value || 1); // Pobranie ilości z inputa lub domyślnie 1\n            const productData = {\n                id: productElement.dataset.productId, // ID produktu z dataset\n                name: document.querySelector('.product-header h1')?.textContent, // Nazwa produktu z nagłówka\n                price: document.querySelector('.price')?.textContent, // Cena produktu\n                image: document.querySelector('.main-image img')?.src, // Źródło głównego obrazu\n                quantity: quantity // Ilość produktu\n            };\n\n            this.addToCart(productData); // Dodanie produktu do koszyka\n        });\n    }\n\n    // Funkcja dodająca produkt do koszyka\n    addToCart(productData) {\n        // Sprawdzenie, czy obiekt aplikacji i CartManager istnieją\n        if (window.app && window.app.cartManager) {\n            if (window.app.cartManager.addToCart(productData)) {\n                this.showNotification(); // Wyświetlenie powiadomienia o dodaniu do koszyka\n            }\n        } else {\n            console.error(\"CartManager not available\"); // Wyświetlenie błędu, jeśli CartManager nie jest dostępny\n        }\n    }\n\n    // Wyświetlenie powiadomienia o dodaniu do koszyka\n    showNotification() {\n        const notification = document.createElement('div'); // Utworzenie elementu div dla powiadomienia\n        notification.className = 'added-to-cart-notification glass'; // Dodanie klas CSS\n        notification.textContent = 'Dodano do koszyka'; // Ustawienie tekstu powiadomienia\n\n        document.body.appendChild(notification); // Dodanie powiadomienia do body\n\n        // Animacja pojawiania się powiadomienia\n        requestAnimationFrame(() => {\n            notification.classList.add('show'); // Dodanie klasy 'show', aby rozpocząć animację\n        });\n\n        // Ukrycie i usunięcie powiadomienia po 2 sekundach\n        setTimeout(() => {\n            notification.classList.remove('show'); // Usunięcie klasy 'show', aby rozpocząć animację znikania\n            setTimeout(() => notification.remove(), 300); // Usunięcie elementu powiadomienia z DOM po zakończeniu animacji znikania\n        }, 2000); // Czas wyświetlania powiadomienia (2 sekundy)\n    }\n}\n\n// Inicjalizacja strony produktu po załadowaniu DOM\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Sprawdzenie, czy na stronie znajduje się element .product-details (co sugeruje stronę produktu)\n    if (document.querySelector('.product-details')) {\n        new ProductPage(); // Utworzenie nowej instancji ProductPage, inicjalizując funkcjonalność strony produktu\n    }\n});\n"],"names":["$356a6f13b8c35739$var$ProductGallery","constructor","mainImage","document","querySelector","thumbnails","querySelectorAll","currentIndex","isTransitioning","length","initGallery","style","opacity","transition","forEach","thumbnail","index","addEventListener","e","preventDefault","newImage","src","switchImage","classList","add","key","previousImage","nextImage","setupTouchEvents","newSrc","newIndex","setTimeout","remove","touchStartX","touchEndX","touches","clientX","passive","changedTouches","difference","Math","abs","$356a6f13b8c35739$var$ProductPage","gallery","initialize","setupQuantityControls","setupAddToCart","controls","input","minus","plus","currentValue","parseInt","value","isNaN","addToCartBtn","productElement","quantity","productData","id","dataset","productId","name","textContent","price","image","addToCart","window","app","cartManager","showNotification","console","error","notification","createElement","className","body","appendChild","requestAnimationFrame"],"version":3,"file":"bio-regeneration.e6227cdf.js.map"}