{"mappings":"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","sources":["<anon>","assets/js/particles.js"],"sourcesContent":["var $788892717624811a$exports = {};\n// Pobierz element canvas i kontekst WebGL\nconst $788892717624811a$var$canvas = document.querySelector(\"#particles-canvas\");\nconst $788892717624811a$var$gl = $788892717624811a$var$canvas.getContext(\"webgl\");\n// Sprawdź, czy WebGL jest wspierany\nif (!$788892717624811a$var$gl) alert(\"WebGL nie jest wspierany przez Twoj\\u0105 przegl\\u0105dark\\u0119.\");\n// Ustawienie rozmiarów canvas na cały ekran\n$788892717624811a$var$canvas.width = window.innerWidth;\n$788892717624811a$var$canvas.height = window.innerHeight;\n$788892717624811a$var$gl.viewport(0, 0, $788892717624811a$var$canvas.width, $788892717624811a$var$canvas.height);\n// Konfigurowalne parametry\nconst $788892717624811a$var$config = {\n    particleCount: 5000,\n    textArray: [\n        \"UltraPower\",\n        \"Super Moce\"\n    ],\n    mouseRadius: 0.1,\n    particleSize: 2,\n    forceMultiplier: 0.001,\n    returnSpeed: 0.005,\n    velocityDamping: 0.95,\n    colorMultiplier: 40000,\n    saturationMultiplier: 1000,\n    textChangeInterval: 10000,\n    rotationForceMultiplier: 0.5 // Mnożnik siły rotacji\n};\n// Inicjalizacja indeksu aktualnego tekstu\nlet $788892717624811a$var$currentTextIndex = 0;\n// Zmienna dla timeoutu zmiany tekstu\nlet $788892717624811a$var$nextTextTimeout;\n// Tablica współrzędnych tekstu\nlet $788892717624811a$var$textCoordinates = [];\n// Obiekt reprezentujący mysz\nconst $788892717624811a$var$mouse = {\n    x: -500,\n    y: -500,\n    radius: $788892717624811a$var$config.mouseRadius // Promień interakcji myszy\n};\n// Tablica cząsteczek\nconst $788892717624811a$var$particles = [];\n// Inicjalizacja cząsteczek\nfor(let i = 0; i < $788892717624811a$var$config.particleCount; i++)$788892717624811a$var$particles.push({\n    x: 0,\n    y: 0,\n    baseX: 0,\n    baseY: 0,\n    vx: 0,\n    vy: 0\n});\n// Vertex shader - odpowiedzialny za pozycję i rozmiar cząsteczek\nconst $788892717624811a$var$vertexShaderSource = `\n    attribute vec2 a_position; // Atrybut - pozycja cz\\u{105}steczki\n    attribute float a_hue; // Atrybut - hue (odcie\\u{144}) koloru\n    attribute float a_saturation; // Atrybut - nasycenie koloru\n    varying float v_hue; // Zmienna wariacyjna - hue przekazywane do fragment shader'a\n    varying float v_saturation; // Zmienna wariacyjna - nasycenie przekazywane do fragment shader'a\n    void main() {\n        gl_PointSize = ${$788892717624811a$var$config.particleSize.toFixed(1)}; // Ustawienie rozmiaru punktu (cz\\u{105}steczki)\n        gl_Position = vec4(a_position, 0.0, 1.0); // Ustawienie pozycji cz\\u{105}steczki\n        v_hue = a_hue; // Przekazanie hue do fragment shader'a\n        v_saturation = a_saturation; // Przekazanie nasycenia do fragment shader'a\n    }\n`;\n// Fragment shader - odpowiedzialny za kolor cząsteczek\nconst $788892717624811a$var$fragmentShaderSource = `\n    precision mediump float; // Ustawienie precyzji na \\u{15B}redni\\u{105}\n    varying float v_hue; // Zmienna wariacyjna - hue otrzymane z vertex shader'a\n    varying float v_saturation; // Zmienna wariacyjna - nasycenie otrzymane z vertex shader'a\n    void main() {\n        // Definicje kolor\\xf3w (zielony i fioletowy)\n        vec3 green = vec3(0.0, 1.0, 0.62); // #00FF9F - zielony\n        vec3 purple = vec3(0.61, 0.0, 1.0); // #9D00FF - fioletowy\n\n        // Mieszanie kolor\\xf3w w zale\\u{17C}no\\u{15B}ci od v_hue (pr\\u{119}dko\\u{15B}ci)\n        float mixValue = mod(v_hue, 1.0); // U\\u{17C}ywamy mod, aby warto\\u{15B}ci by\\u{142}y mi\\u{119}dzy 0 a 1\n        vec3 color = mix(green, purple, mixValue); // Mieszanie zielonego i fioletowego\n\n        // Mieszanie koloru z bia\\u{142}ym w zale\\u{17C}no\\u{15B}ci od nasycenia\n        vec3 finalColor = mix(vec3(1.0), color, v_saturation);\n        gl_FragColor = vec4(finalColor, 1.0); // Ustawienie koloru fragmentu\n    }\n`;\n// Funkcja do tworzenia shader'a\nfunction $788892717624811a$var$createShader(gl, type, source) {\n    const shader = gl.createShader(type); // Utworzenie shader'a danego typu\n    gl.shaderSource(shader, source); // Ustawienie źródła shader'a\n    gl.compileShader(shader); // Kompilacja shader'a\n    // Sprawdzenie statusu kompilacji\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error(gl.getShaderInfoLog(shader)); // Wyświetlenie logu błędów kompilacji\n        gl.deleteShader(shader); // Usunięcie shader'a w przypadku błędu\n        return null; // Zwrócenie null\n    }\n    return shader; // Zwrócenie skompilowanego shader'a\n}\n// Funkcja do tworzenia programu shader'owego\nfunction $788892717624811a$var$createProgram(gl, vertexShader, fragmentShader) {\n    const program = gl.createProgram(); // Utworzenie programu shader'owego\n    gl.attachShader(program, vertexShader); // Dołączenie vertex shader'a\n    gl.attachShader(program, fragmentShader); // Dołączenie fragment shader'a\n    gl.linkProgram(program); // Linkowanie programu\n    // Sprawdzenie statusu linkowania\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error(gl.getProgramInfoLog(program)); // Wyświetlenie logu błędów linkowania\n        gl.deleteProgram(program); // Usunięcie programu w przypadku błędu\n        return null; // Zwrócenie null\n    }\n    return program; // Zwrócenie zlinkowanego programu\n}\n// Utworzenie vertex shader'a\nconst $788892717624811a$var$vertexShader = $788892717624811a$var$createShader($788892717624811a$var$gl, $788892717624811a$var$gl.VERTEX_SHADER, $788892717624811a$var$vertexShaderSource);\n// Utworzenie fragment shader'a\nconst $788892717624811a$var$fragmentShader = $788892717624811a$var$createShader($788892717624811a$var$gl, $788892717624811a$var$gl.FRAGMENT_SHADER, $788892717624811a$var$fragmentShaderSource);\n// Utworzenie programu shader'owego\nconst $788892717624811a$var$program = $788892717624811a$var$createProgram($788892717624811a$var$gl, $788892717624811a$var$vertexShader, $788892717624811a$var$fragmentShader);\n// Pobranie lokalizacji atrybutów w programie shader'owym\nconst $788892717624811a$var$positionAttributeLocation = $788892717624811a$var$gl.getAttribLocation($788892717624811a$var$program, \"a_position\");\nconst $788892717624811a$var$hueAttributeLocation = $788892717624811a$var$gl.getAttribLocation($788892717624811a$var$program, \"a_hue\");\nconst $788892717624811a$var$saturationAttributeLocation = $788892717624811a$var$gl.getAttribLocation($788892717624811a$var$program, \"a_saturation\");\n// Utworzenie buforów dla pozycji, hue i nasycenia\nconst $788892717624811a$var$positionBuffer = $788892717624811a$var$gl.createBuffer();\nconst $788892717624811a$var$hueBuffer = $788892717624811a$var$gl.createBuffer();\nconst $788892717624811a$var$saturationBuffer = $788892717624811a$var$gl.createBuffer();\n// Utworzenie tablic dla danych pozycji, hue i nasycenia\nconst $788892717624811a$var$positions = new Float32Array($788892717624811a$var$config.particleCount * 2);\nconst $788892717624811a$var$hues = new Float32Array($788892717624811a$var$config.particleCount);\nconst $788892717624811a$var$saturations = new Float32Array($788892717624811a$var$config.particleCount);\n// Funkcja do pobierania współrzędnych tekstu na canvas\nfunction $788892717624811a$var$getTextCoordinates(text) {\n    const ctx = document.createElement(\"canvas\").getContext(\"2d\"); // Utworzenie tymczasowego canvas 2D\n    ctx.canvas.width = $788892717624811a$var$canvas.width; // Ustawienie szerokości canvas\n    ctx.canvas.height = $788892717624811a$var$canvas.height; // Ustawienie wysokości canvas\n    const fontSize = Math.min($788892717624811a$var$canvas.width / 6, $788892717624811a$var$canvas.height / 6); // Obliczenie rozmiaru czcionki\n    ctx.font = `900 ${fontSize}px Arial`; // Ustawienie czcionki\n    ctx.fillStyle = \"white\"; // Ustawienie koloru tekstu na biały\n    ctx.textAlign = \"center\"; // Ustawienie wyrównania tekstu na środek\n    ctx.textBaseline = \"middle\"; // Ustawienie linii bazowej tekstu na środek\n    ctx.fillText(text, $788892717624811a$var$canvas.width / 2, $788892717624811a$var$canvas.height / 2); // Wypełnienie tekstem na canvas\n    const imageData = ctx.getImageData(0, 0, $788892717624811a$var$canvas.width, $788892717624811a$var$canvas.height).data; // Pobranie danych obrazu z canvas\n    const coordinates = []; // Tablica na współrzędne\n    // Iteracja po danych obrazu co 4 piksele (R, G, B, A)\n    for(let y = 0; y < $788892717624811a$var$canvas.height; y += 4)for(let x = 0; x < $788892717624811a$var$canvas.width; x += 4){\n        const index = (y * $788892717624811a$var$canvas.width + x) * 4; // Obliczenie indeksu piksela\n        // Sprawdzenie, czy kanał alfa jest większy niż 128 (próg przezroczystości)\n        if (imageData[index + 3] > 128) coordinates.push({\n            x: x / $788892717624811a$var$canvas.width * 2 - 1,\n            y: y / $788892717624811a$var$canvas.height * -2 + 1 // Normalizacja współrzędnej Y do zakresu -1 do 1\n        });\n    }\n    return coordinates; // Zwrócenie tablicy współrzędnych\n}\n// Funkcja do tworzenia cząsteczek na podstawie tekstu\nfunction $788892717624811a$var$createParticles() {\n    $788892717624811a$var$textCoordinates = $788892717624811a$var$getTextCoordinates($788892717624811a$var$config.textArray[$788892717624811a$var$currentTextIndex]); // Pobranie współrzędnych tekstu\n    // Ustawienie pozycji bazowych cząsteczek na współrzędne tekstu\n    for(let i = 0; i < $788892717624811a$var$config.particleCount; i++){\n        const randomIndex = Math.floor(Math.random() * $788892717624811a$var$textCoordinates.length); // Losowy indeks współrzędnej\n        const { x: x, y: y } = $788892717624811a$var$textCoordinates[randomIndex]; // Pobranie losowej współrzędnej\n        $788892717624811a$var$particles[i].x = $788892717624811a$var$particles[i].baseX = x; // Ustawienie pozycji X i bazowej pozycji X\n        $788892717624811a$var$particles[i].y = $788892717624811a$var$particles[i].baseY = y; // Ustawienie pozycji Y i bazowej pozycji Y\n    }\n}\n// Funkcja do aktualizacji pozycji cząsteczek\nfunction $788892717624811a$var$updateParticles() {\n    // Iteracja po wszystkich cząsteczkach\n    for(let i = 0; i < $788892717624811a$var$config.particleCount; i++){\n        const particle = $788892717624811a$var$particles[i]; // Pobranie cząsteczki\n        const dx = $788892717624811a$var$mouse.x - particle.x; // Obliczenie różnicy X między myszą a cząsteczką\n        const dy = $788892717624811a$var$mouse.y - particle.y; // Obliczenie różnicy Y między myszą a cząsteczką\n        const distance = Math.sqrt(dx * dx + dy * dy); // Obliczenie odległości między myszą a cząsteczką\n        const forceDirectionX = dx / distance; // Kierunek siły w osi X\n        const forceDirectionY = dy / distance; // Kierunek siły w osi Y\n        const maxDistance = $788892717624811a$var$mouse.radius; // Maksymalna odległość interakcji myszy\n        const force = (maxDistance - distance) / maxDistance; // Siła odpychania (maleje z odległością)\n        const directionX = forceDirectionX * force * $788892717624811a$var$config.forceMultiplier; // Składowa X siły\n        const directionY = forceDirectionY * force * $788892717624811a$var$config.forceMultiplier; // Składowa Y siły\n        const angle = Math.atan2(dy, dx); // Kąt między cząsteczką a myszą\n        // Siła rotacji cząsteczek wokół myszy\n        const rotationForceX = Math.sin(-Math.cos(angle * -1) * Math.sin($788892717624811a$var$config.rotationForceMultiplier * Math.cos(force)) * Math.sin(distance * distance) * Math.sin(angle * distance));\n        const rotationForceY = Math.sin(Math.cos(angle * 1) * Math.sin($788892717624811a$var$config.rotationForceMultiplier * Math.sin(force)) * Math.sin(distance * distance) * Math.cos(angle * distance));\n        // Jeśli cząsteczka jest blisko myszy, odepchnij ją\n        if (distance < $788892717624811a$var$mouse.radius) {\n            particle.vx -= directionX + rotationForceX; // Zmiana prędkości X\n            particle.vy -= directionY + rotationForceY; // Zmiana prędkości Y\n        } else {\n            // W przeciwnym razie, przyciągaj cząsteczkę do pozycji bazowej\n            particle.vx += (particle.baseX - particle.x) * $788892717624811a$var$config.returnSpeed; // Powrót do pozycji bazowej X\n            particle.vy += (particle.baseY - particle.y) * $788892717624811a$var$config.returnSpeed; // Powrót do pozycji bazowej Y\n        }\n        // Aktualizacja pozycji cząsteczki\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n        // Tłumienie prędkości cząsteczek\n        particle.vx *= $788892717624811a$var$config.velocityDamping;\n        particle.vy *= $788892717624811a$var$config.velocityDamping;\n        // Obliczenie prędkości i hue na podstawie prędkości\n        const speed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\n        const hue = speed * $788892717624811a$var$config.colorMultiplier % 360; // Hue zależy od prędkości\n        // Ustawienie hue i nasycenia dla cząsteczki\n        $788892717624811a$var$hues[i] = hue / 360; // Normalizacja hue do zakresu 0-1\n        $788892717624811a$var$saturations[i] = Math.min(speed * $788892717624811a$var$config.saturationMultiplier, 1); // Nasycenie zależy od prędkości, max 1\n        $788892717624811a$var$positions[i * 2] = particle.x; // Ustawienie pozycji X w tablicy pozycji\n        $788892717624811a$var$positions[i * 2 + 1] = particle.y; // Ustawienie pozycji Y w tablicy pozycji\n    }\n    // Aktualizacja buforów pozycji, hue i nasycenia\n    $788892717624811a$var$gl.bindBuffer($788892717624811a$var$gl.ARRAY_BUFFER, $788892717624811a$var$positionBuffer);\n    $788892717624811a$var$gl.bufferData($788892717624811a$var$gl.ARRAY_BUFFER, $788892717624811a$var$positions, $788892717624811a$var$gl.DYNAMIC_DRAW); // Dynamiczne rysowanie - dane mogą się zmieniać\n    $788892717624811a$var$gl.bindBuffer($788892717624811a$var$gl.ARRAY_BUFFER, $788892717624811a$var$hueBuffer);\n    $788892717624811a$var$gl.bufferData($788892717624811a$var$gl.ARRAY_BUFFER, $788892717624811a$var$hues, $788892717624811a$var$gl.DYNAMIC_DRAW); // Dynamiczne rysowanie - dane mogą się zmieniać\n    $788892717624811a$var$gl.bindBuffer($788892717624811a$var$gl.ARRAY_BUFFER, $788892717624811a$var$saturationBuffer);\n    $788892717624811a$var$gl.bufferData($788892717624811a$var$gl.ARRAY_BUFFER, $788892717624811a$var$saturations, $788892717624811a$var$gl.DYNAMIC_DRAW); // Dynamiczne rysowanie - dane mogą się zmieniać\n}\n// Funkcja animacji\nfunction $788892717624811a$var$animate() {\n    $788892717624811a$var$updateParticles(); // Aktualizacja pozycji cząsteczek\n    $788892717624811a$var$gl.clear($788892717624811a$var$gl.COLOR_BUFFER_BIT); // Czyszczenie canvas\n    // Ustawienie atrybutów pozycji, hue i nasycenia\n    $788892717624811a$var$gl.bindBuffer($788892717624811a$var$gl.ARRAY_BUFFER, $788892717624811a$var$positionBuffer);\n    $788892717624811a$var$gl.vertexAttribPointer($788892717624811a$var$positionAttributeLocation, 2, $788892717624811a$var$gl.FLOAT, false, 0, 0); // Ustawienie wskaźnika na dane pozycji\n    $788892717624811a$var$gl.enableVertexAttribArray($788892717624811a$var$positionAttributeLocation); // Włączenie atrybutu pozycji\n    $788892717624811a$var$gl.bindBuffer($788892717624811a$var$gl.ARRAY_BUFFER, $788892717624811a$var$hueBuffer);\n    $788892717624811a$var$gl.vertexAttribPointer($788892717624811a$var$hueAttributeLocation, 1, $788892717624811a$var$gl.FLOAT, false, 0, 0); // Ustawienie wskaźnika na dane hue\n    $788892717624811a$var$gl.enableVertexAttribArray($788892717624811a$var$hueAttributeLocation); // Włączenie atrybutu hue\n    $788892717624811a$var$gl.bindBuffer($788892717624811a$var$gl.ARRAY_BUFFER, $788892717624811a$var$saturationBuffer);\n    $788892717624811a$var$gl.vertexAttribPointer($788892717624811a$var$saturationAttributeLocation, 1, $788892717624811a$var$gl.FLOAT, false, 0, 0); // Ustawienie wskaźnika na dane nasycenia\n    $788892717624811a$var$gl.enableVertexAttribArray($788892717624811a$var$saturationAttributeLocation); // Włączenie atrybutu nasycenia\n    $788892717624811a$var$gl.useProgram($788892717624811a$var$program); // Użycie programu shader'owego\n    $788892717624811a$var$gl.drawArrays($788892717624811a$var$gl.POINTS, 0, $788892717624811a$var$config.particleCount); // Rysowanie punktów (cząsteczek)\n    requestAnimationFrame($788892717624811a$var$animate); // Wywołanie animacji w następnej klatce\n}\n// Detektor zdarzeń dla ruchu myszy\n$788892717624811a$var$canvas.addEventListener(\"mousemove\", (event)=>{\n    $788892717624811a$var$mouse.x = event.clientX / $788892717624811a$var$canvas.width * 2 - 1; // Normalizacja pozycji X myszy\n    $788892717624811a$var$mouse.y = event.clientY / $788892717624811a$var$canvas.height * -2 + 1; // Normalizacja pozycji Y myszy\n});\n// Detektor zdarzeń dla opuszczenia canvas przez mysz\n$788892717624811a$var$canvas.addEventListener(\"mouseleave\", ()=>{\n    $788892717624811a$var$mouse.x = -500; // Ustawienie pozycji X myszy poza ekran\n    $788892717624811a$var$mouse.y = -500; // Ustawienie pozycji Y myszy poza ekran\n});\n// Detektor zdarzeń dla zmiany rozmiaru okna\nwindow.addEventListener(\"resize\", ()=>{\n    $788892717624811a$var$canvas.width = window.innerWidth; // Aktualizacja szerokości canvas\n    $788892717624811a$var$canvas.height = window.innerHeight; // Aktualizacja wysokości canvas\n    $788892717624811a$var$gl.viewport(0, 0, $788892717624811a$var$canvas.width, $788892717624811a$var$canvas.height); // Aktualizacja viewport WebGL\n    $788892717624811a$var$createParticles(); // Ponowne utworzenie cząsteczek dla nowego rozmiaru\n});\n// Funkcja do zmiany tekstu\nfunction $788892717624811a$var$changeText() {\n    $788892717624811a$var$currentTextIndex = ($788892717624811a$var$currentTextIndex + 1) % $788892717624811a$var$config.textArray.length; // Przejście do następnego tekstu w tablicy\n    const newCoordinates = $788892717624811a$var$getTextCoordinates($788892717624811a$var$config.textArray[$788892717624811a$var$currentTextIndex]); // Pobranie współrzędnych nowego tekstu\n    // Aktualizacja pozycji bazowych cząsteczek na nowe współrzędne tekstu\n    for(let i = 0; i < $788892717624811a$var$config.particleCount; i++){\n        const randomIndex = Math.floor(Math.random() * newCoordinates.length); // Losowy indeks współrzędnej\n        const { x: x, y: y } = newCoordinates[randomIndex]; // Pobranie losowej współrzędnej\n        $788892717624811a$var$particles[i].baseX = x; // Ustawienie bazowej pozycji X\n        $788892717624811a$var$particles[i].baseY = y; // Ustawienie bazowej pozycji Y\n    }\n    $788892717624811a$var$nextTextTimeout = setTimeout($788892717624811a$var$changeText, $788892717624811a$var$config.textChangeInterval); // Ustawienie timeoutu dla następnej zmiany tekstu\n}\n// Ustawienie koloru czyszczenia canvas na czarny\n$788892717624811a$var$gl.clearColor(0, 0, 0, 1);\n// Utworzenie cząsteczek\n$788892717624811a$var$createParticles();\n// Rozpoczęcie animacji\n$788892717624811a$var$animate();\n// Uruchomienie zmiany tekstu po pierwszym interwale\n$788892717624811a$var$nextTextTimeout = setTimeout($788892717624811a$var$changeText, $788892717624811a$var$config.textChangeInterval);\n\n\n//# sourceMappingURL=index.8c01476a.js.map\n","// Pobierz element canvas i kontekst WebGL\nconst canvas = document.querySelector(\"#particles-canvas\");\nconst gl = canvas.getContext(\"webgl\");\n\n// Sprawdź, czy WebGL jest wspierany\nif (!gl) {\n    alert(\"WebGL nie jest wspierany przez Twoją przeglądarkę.\");\n}\n\n// Ustawienie rozmiarów canvas na cały ekran\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\ngl.viewport(0, 0, canvas.width, canvas.height);\n\n// Konfigurowalne parametry\nconst config = {\n    particleCount: 5000, // Liczba cząsteczek\n    textArray: [\"UltraPower\", \"Super Moce\"], // Tablica tekstów do wyświetlenia\n    mouseRadius: 0.1, // Promień interakcji myszy\n    particleSize: 2, // Rozmiar cząsteczek\n    forceMultiplier: 0.001, // Mnożnik siły odpychania\n    returnSpeed: 0.005, // Prędkość powrotu cząsteczek do pozycji bazowej\n    velocityDamping: 0.95, // Tłumienie prędkości cząsteczek\n    colorMultiplier: 40000, // Mnożnik koloru (wpływa na hue)\n    saturationMultiplier: 1000, // Mnożnik nasycenia koloru\n    textChangeInterval: 10000, // Interwał zmiany tekstu (ms)\n    rotationForceMultiplier: 0.5 // Mnożnik siły rotacji\n};\n\n// Inicjalizacja indeksu aktualnego tekstu\nlet currentTextIndex = 0;\n// Zmienna dla timeoutu zmiany tekstu\nlet nextTextTimeout;\n// Tablica współrzędnych tekstu\nlet textCoordinates = [];\n\n// Obiekt reprezentujący mysz\nconst mouse = {\n    x: -500, // Pozycja X myszy (poza ekranem na początku)\n    y: -500, // Pozycja Y myszy (poza ekranem na początku)\n    radius: config.mouseRadius // Promień interakcji myszy\n};\n\n// Tablica cząsteczek\nconst particles = [];\n// Inicjalizacja cząsteczek\nfor (let i = 0; i < config.particleCount; i++) {\n    particles.push({ x: 0, y: 0, baseX: 0, baseY: 0, vx: 0, vy: 0 });\n}\n\n// Vertex shader - odpowiedzialny za pozycję i rozmiar cząsteczek\nconst vertexShaderSource = `\n    attribute vec2 a_position; // Atrybut - pozycja cząsteczki\n    attribute float a_hue; // Atrybut - hue (odcień) koloru\n    attribute float a_saturation; // Atrybut - nasycenie koloru\n    varying float v_hue; // Zmienna wariacyjna - hue przekazywane do fragment shader'a\n    varying float v_saturation; // Zmienna wariacyjna - nasycenie przekazywane do fragment shader'a\n    void main() {\n        gl_PointSize = ${config.particleSize.toFixed(1)}; // Ustawienie rozmiaru punktu (cząsteczki)\n        gl_Position = vec4(a_position, 0.0, 1.0); // Ustawienie pozycji cząsteczki\n        v_hue = a_hue; // Przekazanie hue do fragment shader'a\n        v_saturation = a_saturation; // Przekazanie nasycenia do fragment shader'a\n    }\n`;\n\n// Fragment shader - odpowiedzialny za kolor cząsteczek\nconst fragmentShaderSource = `\n    precision mediump float; // Ustawienie precyzji na średnią\n    varying float v_hue; // Zmienna wariacyjna - hue otrzymane z vertex shader'a\n    varying float v_saturation; // Zmienna wariacyjna - nasycenie otrzymane z vertex shader'a\n    void main() {\n        // Definicje kolorów (zielony i fioletowy)\n        vec3 green = vec3(0.0, 1.0, 0.62); // #00FF9F - zielony\n        vec3 purple = vec3(0.61, 0.0, 1.0); // #9D00FF - fioletowy\n\n        // Mieszanie kolorów w zależności od v_hue (prędkości)\n        float mixValue = mod(v_hue, 1.0); // Używamy mod, aby wartości były między 0 a 1\n        vec3 color = mix(green, purple, mixValue); // Mieszanie zielonego i fioletowego\n\n        // Mieszanie koloru z białym w zależności od nasycenia\n        vec3 finalColor = mix(vec3(1.0), color, v_saturation);\n        gl_FragColor = vec4(finalColor, 1.0); // Ustawienie koloru fragmentu\n    }\n`;\n\n// Funkcja do tworzenia shader'a\nfunction createShader(gl, type, source) {\n    const shader = gl.createShader(type); // Utworzenie shader'a danego typu\n    gl.shaderSource(shader, source); // Ustawienie źródła shader'a\n    gl.compileShader(shader); // Kompilacja shader'a\n    // Sprawdzenie statusu kompilacji\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error(gl.getShaderInfoLog(shader)); // Wyświetlenie logu błędów kompilacji\n        gl.deleteShader(shader); // Usunięcie shader'a w przypadku błędu\n        return null; // Zwrócenie null\n    }\n    return shader; // Zwrócenie skompilowanego shader'a\n}\n\n// Funkcja do tworzenia programu shader'owego\nfunction createProgram(gl, vertexShader, fragmentShader) {\n    const program = gl.createProgram(); // Utworzenie programu shader'owego\n    gl.attachShader(program, vertexShader); // Dołączenie vertex shader'a\n    gl.attachShader(program, fragmentShader); // Dołączenie fragment shader'a\n    gl.linkProgram(program); // Linkowanie programu\n    // Sprawdzenie statusu linkowania\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error(gl.getProgramInfoLog(program)); // Wyświetlenie logu błędów linkowania\n        gl.deleteProgram(program); // Usunięcie programu w przypadku błędu\n        return null; // Zwrócenie null\n    }\n    return program; // Zwrócenie zlinkowanego programu\n}\n\n// Utworzenie vertex shader'a\nconst vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n// Utworzenie fragment shader'a\nconst fragmentShader = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n);\n// Utworzenie programu shader'owego\nconst program = createProgram(gl, vertexShader, fragmentShader);\n\n// Pobranie lokalizacji atrybutów w programie shader'owym\nconst positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\nconst hueAttributeLocation = gl.getAttribLocation(program, \"a_hue\");\nconst saturationAttributeLocation = gl.getAttribLocation(\n    program,\n    \"a_saturation\"\n);\n\n// Utworzenie buforów dla pozycji, hue i nasycenia\nconst positionBuffer = gl.createBuffer();\nconst hueBuffer = gl.createBuffer();\nconst saturationBuffer = gl.createBuffer();\n\n// Utworzenie tablic dla danych pozycji, hue i nasycenia\nconst positions = new Float32Array(config.particleCount * 2);\nconst hues = new Float32Array(config.particleCount);\nconst saturations = new Float32Array(config.particleCount);\n\n// Funkcja do pobierania współrzędnych tekstu na canvas\nfunction getTextCoordinates(text) {\n    const ctx = document.createElement(\"canvas\").getContext(\"2d\"); // Utworzenie tymczasowego canvas 2D\n    ctx.canvas.width = canvas.width; // Ustawienie szerokości canvas\n    ctx.canvas.height = canvas.height; // Ustawienie wysokości canvas\n    const fontSize = Math.min(canvas.width / 6, canvas.height / 6); // Obliczenie rozmiaru czcionki\n    ctx.font = `900 ${fontSize}px Arial`; // Ustawienie czcionki\n    ctx.fillStyle = \"white\"; // Ustawienie koloru tekstu na biały\n    ctx.textAlign = \"center\"; // Ustawienie wyrównania tekstu na środek\n    ctx.textBaseline = \"middle\"; // Ustawienie linii bazowej tekstu na środek\n    ctx.fillText(text, canvas.width / 2, canvas.height / 2); // Wypełnienie tekstem na canvas\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data; // Pobranie danych obrazu z canvas\n    const coordinates = []; // Tablica na współrzędne\n    // Iteracja po danych obrazu co 4 piksele (R, G, B, A)\n    for (let y = 0; y < canvas.height; y += 4) {\n        for (let x = 0; x < canvas.width; x += 4) {\n            const index = (y * canvas.width + x) * 4; // Obliczenie indeksu piksela\n            // Sprawdzenie, czy kanał alfa jest większy niż 128 (próg przezroczystości)\n            if (imageData[index + 3] > 128) {\n                coordinates.push({\n                    x: (x / canvas.width) * 2 - 1, // Normalizacja współrzędnej X do zakresu -1 do 1\n                    y: (y / canvas.height) * -2 + 1 // Normalizacja współrzędnej Y do zakresu -1 do 1\n                });\n            }\n        }\n    }\n    return coordinates; // Zwrócenie tablicy współrzędnych\n}\n\n// Funkcja do tworzenia cząsteczek na podstawie tekstu\nfunction createParticles() {\n    textCoordinates = getTextCoordinates(config.textArray[currentTextIndex]); // Pobranie współrzędnych tekstu\n    // Ustawienie pozycji bazowych cząsteczek na współrzędne tekstu\n    for (let i = 0; i < config.particleCount; i++) {\n        const randomIndex = Math.floor(Math.random() * textCoordinates.length); // Losowy indeks współrzędnej\n        const { x, y } = textCoordinates[randomIndex]; // Pobranie losowej współrzędnej\n        particles[i].x = particles[i].baseX = x; // Ustawienie pozycji X i bazowej pozycji X\n        particles[i].y = particles[i].baseY = y; // Ustawienie pozycji Y i bazowej pozycji Y\n    }\n}\n\n// Funkcja do aktualizacji pozycji cząsteczek\nfunction updateParticles() {\n    // Iteracja po wszystkich cząsteczkach\n    for (let i = 0; i < config.particleCount; i++) {\n        const particle = particles[i]; // Pobranie cząsteczki\n        const dx = mouse.x - particle.x; // Obliczenie różnicy X między myszą a cząsteczką\n        const dy = mouse.y - particle.y; // Obliczenie różnicy Y między myszą a cząsteczką\n        const distance = Math.sqrt(dx * dx + dy * dy); // Obliczenie odległości między myszą a cząsteczką\n        const forceDirectionX = dx / distance; // Kierunek siły w osi X\n        const forceDirectionY = dy / distance; // Kierunek siły w osi Y\n        const maxDistance = mouse.radius; // Maksymalna odległość interakcji myszy\n        const force = (maxDistance - distance) / maxDistance; // Siła odpychania (maleje z odległością)\n        const directionX = forceDirectionX * force * config.forceMultiplier; // Składowa X siły\n        const directionY = forceDirectionY * force * config.forceMultiplier; // Składowa Y siły\n        const angle = Math.atan2(dy, dx); // Kąt między cząsteczką a myszą\n\n        // Siła rotacji cząsteczek wokół myszy\n        const rotationForceX = Math.sin(\n            -Math.cos(angle * -1) *\n            Math.sin(config.rotationForceMultiplier * Math.cos(force)) *\n            Math.sin(distance * distance) *\n            Math.sin(angle * distance)\n        );\n        const rotationForceY = Math.sin(\n            Math.cos(angle * 1) *\n            Math.sin(config.rotationForceMultiplier * Math.sin(force)) *\n            Math.sin(distance * distance) *\n            Math.cos(angle * distance)\n        );\n\n        // Jeśli cząsteczka jest blisko myszy, odepchnij ją\n        if (distance < mouse.radius) {\n            particle.vx -= directionX + rotationForceX; // Zmiana prędkości X\n            particle.vy -= directionY + rotationForceY; // Zmiana prędkości Y\n        } else {\n            // W przeciwnym razie, przyciągaj cząsteczkę do pozycji bazowej\n            particle.vx += (particle.baseX - particle.x) * config.returnSpeed; // Powrót do pozycji bazowej X\n            particle.vy += (particle.baseY - particle.y) * config.returnSpeed; // Powrót do pozycji bazowej Y\n        }\n\n        // Aktualizacja pozycji cząsteczki\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n        // Tłumienie prędkości cząsteczek\n        particle.vx *= config.velocityDamping;\n        particle.vy *= config.velocityDamping;\n        // Obliczenie prędkości i hue na podstawie prędkości\n        const speed = Math.sqrt(\n            particle.vx * particle.vx + particle.vy * particle.vy\n        );\n        const hue = (speed * config.colorMultiplier) % 360; // Hue zależy od prędkości\n\n        // Ustawienie hue i nasycenia dla cząsteczki\n        hues[i] = hue / 360; // Normalizacja hue do zakresu 0-1\n        saturations[i] = Math.min(speed * config.saturationMultiplier, 1); // Nasycenie zależy od prędkości, max 1\n        positions[i * 2] = particle.x; // Ustawienie pozycji X w tablicy pozycji\n        positions[i * 2 + 1] = particle.y; // Ustawienie pozycji Y w tablicy pozycji\n    }\n    // Aktualizacja buforów pozycji, hue i nasycenia\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.DYNAMIC_DRAW); // Dynamiczne rysowanie - dane mogą się zmieniać\n    gl.bindBuffer(gl.ARRAY_BUFFER, hueBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, hues, gl.DYNAMIC_DRAW); // Dynamiczne rysowanie - dane mogą się zmieniać\n    gl.bindBuffer(gl.ARRAY_BUFFER, saturationBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, saturations, gl.DYNAMIC_DRAW); // Dynamiczne rysowanie - dane mogą się zmieniać\n}\n\n// Funkcja animacji\nfunction animate() {\n    updateParticles(); // Aktualizacja pozycji cząsteczek\n    gl.clear(gl.COLOR_BUFFER_BIT); // Czyszczenie canvas\n    // Ustawienie atrybutów pozycji, hue i nasycenia\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0); // Ustawienie wskaźnika na dane pozycji\n    gl.enableVertexAttribArray(positionAttributeLocation); // Włączenie atrybutu pozycji\n    gl.bindBuffer(gl.ARRAY_BUFFER, hueBuffer);\n    gl.vertexAttribPointer(hueAttributeLocation, 1, gl.FLOAT, false, 0, 0); // Ustawienie wskaźnika na dane hue\n    gl.enableVertexAttribArray(hueAttributeLocation); // Włączenie atrybutu hue\n    gl.bindBuffer(gl.ARRAY_BUFFER, saturationBuffer);\n    gl.vertexAttribPointer(saturationAttributeLocation, 1, gl.FLOAT, false, 0, 0); // Ustawienie wskaźnika na dane nasycenia\n    gl.enableVertexAttribArray(saturationAttributeLocation); // Włączenie atrybutu nasycenia\n    gl.useProgram(program); // Użycie programu shader'owego\n    gl.drawArrays(gl.POINTS, 0, config.particleCount); // Rysowanie punktów (cząsteczek)\n    requestAnimationFrame(animate); // Wywołanie animacji w następnej klatce\n}\n\n// Detektor zdarzeń dla ruchu myszy\ncanvas.addEventListener(\"mousemove\", (event) => {\n    mouse.x = (event.clientX / canvas.width) * 2 - 1; // Normalizacja pozycji X myszy\n    mouse.y = (event.clientY / canvas.height) * -2 + 1; // Normalizacja pozycji Y myszy\n});\n\n// Detektor zdarzeń dla opuszczenia canvas przez mysz\ncanvas.addEventListener(\"mouseleave\", () => {\n    mouse.x = -500; // Ustawienie pozycji X myszy poza ekran\n    mouse.y = -500; // Ustawienie pozycji Y myszy poza ekran\n});\n\n// Detektor zdarzeń dla zmiany rozmiaru okna\nwindow.addEventListener(\"resize\", () => {\n    canvas.width = window.innerWidth; // Aktualizacja szerokości canvas\n    canvas.height = window.innerHeight; // Aktualizacja wysokości canvas\n    gl.viewport(0, 0, canvas.width, canvas.height); // Aktualizacja viewport WebGL\n    createParticles(); // Ponowne utworzenie cząsteczek dla nowego rozmiaru\n});\n\n// Funkcja do zmiany tekstu\nfunction changeText() {\n    currentTextIndex = (currentTextIndex + 1) % config.textArray.length; // Przejście do następnego tekstu w tablicy\n    const newCoordinates = getTextCoordinates(config.textArray[currentTextIndex]); // Pobranie współrzędnych nowego tekstu\n    // Aktualizacja pozycji bazowych cząsteczek na nowe współrzędne tekstu\n    for (let i = 0; i < config.particleCount; i++) {\n        const randomIndex = Math.floor(Math.random() * newCoordinates.length); // Losowy indeks współrzędnej\n        const { x, y } = newCoordinates[randomIndex]; // Pobranie losowej współrzędnej\n        particles[i].baseX = x; // Ustawienie bazowej pozycji X\n        particles[i].baseY = y; // Ustawienie bazowej pozycji Y\n    }\n    nextTextTimeout = setTimeout(changeText, config.textChangeInterval); // Ustawienie timeoutu dla następnej zmiany tekstu\n}\n\n// Ustawienie koloru czyszczenia canvas na czarny\ngl.clearColor(0, 0, 0, 1);\n// Utworzenie cząsteczek\ncreateParticles();\n// Rozpoczęcie animacji\nanimate();\n// Uruchomienie zmiany tekstu po pierwszym interwale\nnextTextTimeout = setTimeout(changeText, config.textChangeInterval);\n"],"names":["$788892717624811a$var$canvas","document","querySelector","$788892717624811a$var$gl","getContext","alert","width","window","innerWidth","height","innerHeight","viewport","$788892717624811a$var$config","particleCount","textArray","mouseRadius","particleSize","forceMultiplier","returnSpeed","velocityDamping","colorMultiplier","saturationMultiplier","textChangeInterval","rotationForceMultiplier","$788892717624811a$var$currentTextIndex","$788892717624811a$var$textCoordinates","$788892717624811a$var$mouse","x","y","radius","$788892717624811a$var$particles","i","push","baseX","baseY","vx","vy","$788892717624811a$var$vertexShaderSource","toFixed","$788892717624811a$var$fragmentShaderSource","$788892717624811a$var$createShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","$788892717624811a$var$vertexShader","VERTEX_SHADER","$788892717624811a$var$fragmentShader","FRAGMENT_SHADER","$788892717624811a$var$program","$788892717624811a$var$createProgram","vertexShader","fragmentShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","$788892717624811a$var$positionAttributeLocation","getAttribLocation","$788892717624811a$var$hueAttributeLocation","$788892717624811a$var$saturationAttributeLocation","$788892717624811a$var$positionBuffer","createBuffer","$788892717624811a$var$hueBuffer","$788892717624811a$var$saturationBuffer","$788892717624811a$var$positions","Float32Array","$788892717624811a$var$hues","$788892717624811a$var$saturations","$788892717624811a$var$getTextCoordinates","text","ctx","createElement","canvas","fontSize","Math","min","font","fillStyle","textAlign","textBaseline","fillText","imageData","getImageData","data","coordinates","index","$788892717624811a$var$createParticles","randomIndex","floor","random","length","addEventListener","event","clientX","clientY","clearColor","$788892717624811a$var$animate","$788892717624811a$var$updateParticles","particle","dx","dy","distance","sqrt","forceDirectionX","forceDirectionY","maxDistance","force","directionX","directionY","angle","atan2","rotationForceX","sin","cos","rotationForceY","speed","hue","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","clear","COLOR_BUFFER_BIT","vertexAttribPointer","FLOAT","enableVertexAttribArray","useProgram","drawArrays","POINTS","requestAnimationFrame","setTimeout","$788892717624811a$var$changeText","newCoordinates"],"version":3,"file":"index.8c01476a.js.map"}